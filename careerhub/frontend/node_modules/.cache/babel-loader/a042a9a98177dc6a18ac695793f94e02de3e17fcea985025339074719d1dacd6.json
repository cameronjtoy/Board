{"ast":null,"code":"var _jsxFileName = \"/Users/camerontoy/Job Tracker Web App/CareerHub/careerhub/frontend/src/components/Buttons/Cell.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport \"./Cell.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TableCell = _ref => {\n  _s();\n  var _columnMeta$options;\n  let {\n    getValue,\n    row,\n    column,\n    table\n  } = _ref;\n  const initialValue = getValue();\n  const columnMeta = column.columnDef.meta;\n  const tableMeta = table.options.meta;\n  const [value, setValue] = useState(initialValue);\n  const {\n    isCellEditable,\n    startEditing,\n    stopEditing\n  } = useContext(TableCellContext);\n  useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  const onBlur = () => {\n    var _table$options$meta;\n    (_table$options$meta = table.options.meta) === null || _table$options$meta === void 0 ? void 0 : _table$options$meta.updateData(row.index, column.id, value);\n    stopEditing();\n  };\n  const onSelectChange = async e => {\n    if (!isCellEditable(row.index, column.id)) return;\n    setValue(e.target.value);\n    tableMeta === null || tableMeta === void 0 ? void 0 : tableMeta.updateData(row.index, column.id, e.target.value);\n\n    // Send a POST request with the updated value when an item is selected from the dropdown\n    try {\n      const payload = {\n        rowIndex: row.index,\n        columnId: column.id,\n        companyName: row.original.company_name,\n        initialValues: initialValue,\n        updatedValue: e.target.value // Note: using e.target.value here directly\n      };\n\n      const res = await axios.post(\"http://localhost:8080/api/profile/update\", payload);\n      console.log(res);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const onDateChange = async e => {\n    if (!isCellEditable(row.index, column.id)) return;\n    setValue(e.target.value);\n    tableMeta === null || tableMeta === void 0 ? void 0 : tableMeta.updateData(row.index, column.id, e.target.value);\n\n    // Send a POST request with the selected date\n    try {\n      const payload = {\n        rowIndex: row.index,\n        columnId: column.id,\n        companyName: row.original.company_name,\n        initialValues: initialValue,\n        updatedValue: e.target.value\n      };\n      const res = await axios.post(\"http://localhost:8080/api/profile/update\", payload);\n      console.log(res);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const handleKeyDown = async e => {\n    if (!isCellEditable(row.index, column.id)) return;\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      onBlur();\n      // Send a POST request with the updated value\n      try {\n        const payload = {\n          rowIndex: row.index,\n          columnId: column.id,\n          companyName: row.original.company_name,\n          initialValues: initialValue,\n          updatedValue: value\n        };\n        const res = await axios.post(\"http://localhost:8080/api/profile/update\", payload);\n        console.log(res);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n  return (columnMeta === null || columnMeta === void 0 ? void 0 : columnMeta.type) === \"select\" ? /*#__PURE__*/_jsxDEV(\"select\", {\n    onChange: onSelectChange,\n    value: initialValue,\n    children: columnMeta === null || columnMeta === void 0 ? void 0 : (_columnMeta$options = columnMeta.options) === null || _columnMeta$options === void 0 ? void 0 : _columnMeta$options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: option.value,\n      children: option.label\n    }, option.value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this) : (columnMeta === null || columnMeta === void 0 ? void 0 : columnMeta.type) === \"date\" ? /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"date\",\n    value: value,\n    onChange: onDateChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n    value: value,\n    onChange: e => setValue(e.target.value),\n    onBlur: onBlur,\n    onKeyDown: handleKeyDown,\n    type: (columnMeta === null || columnMeta === void 0 ? void 0 : columnMeta.type) || \"text\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n_s(TableCell, \"rr1+li2NydoPZMmyi7SJqLj9KHs=\");\n_c = TableCell;\nexport default TableCell;\nvar _c;\n$RefreshReg$(_c, \"TableCell\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","jsxDEV","_jsxDEV","TableCell","_ref","_s","_columnMeta$options","getValue","row","column","table","initialValue","columnMeta","columnDef","meta","tableMeta","options","value","setValue","isCellEditable","startEditing","stopEditing","TableCellContext","onBlur","_table$options$meta","updateData","index","id","onSelectChange","e","target","payload","rowIndex","columnId","companyName","original","company_name","initialValues","updatedValue","res","post","console","log","err","onDateChange","handleKeyDown","key","preventDefault","type","onChange","children","map","option","label","fileName","_jsxFileName","lineNumber","columnNumber","onKeyDown","_c","$RefreshReg$"],"sources":["/Users/camerontoy/Job Tracker Web App/CareerHub/careerhub/frontend/src/components/Buttons/Cell.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\"\nimport axios from \"axios\"\nimport \"./Cell.css\"\n\n\n\nconst TableCell = ({ getValue, row, column, table}) => {\n    const initialValue = getValue()\n    const columnMeta = column.columnDef.meta;\n    const tableMeta = table.options.meta;\n    const [value, setValue] = useState(initialValue)\n    const { isCellEditable, startEditing, stopEditing } = useContext(TableCellContext);\n\n    useEffect(() => \n    {setValue(initialValue)\n    }, [initialValue])\n\n    const onBlur = () => {\n        table.options.meta?.updateData(row.index, column.id, value);\n        stopEditing();\n    };\n\n    const onSelectChange = async (e) => {\n        if (!isCellEditable(row.index, column.id)) return;\n        setValue(e.target.value);\n        tableMeta?.updateData(row.index, column.id, e.target.value);\n    \n        // Send a POST request with the updated value when an item is selected from the dropdown\n        try {\n            const payload = {\n                rowIndex: row.index,\n                columnId: column.id,\n                companyName: row.original.company_name,\n                initialValues: initialValue,\n                updatedValue: e.target.value, // Note: using e.target.value here directly\n            };\n            const res = await axios.post(\"http://localhost:8080/api/profile/update\", payload);\n            console.log(res);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    const onDateChange = async (e) => {\n        if (!isCellEditable(row.index, column.id)) return;\n        setValue(e.target.value);\n        tableMeta?.updateData(row.index, column.id, e.target.value);\n        \n        // Send a POST request with the selected date\n        try {\n            const payload = {\n                rowIndex: row.index,\n                columnId: column.id,\n                companyName: row.original.company_name,\n                initialValues: initialValue,\n                updatedValue: e.target.value, \n            };\n            const res = await axios.post(\"http://localhost:8080/api/profile/update\", payload);\n            console.log(res);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    \n\n    const handleKeyDown = async (e) => {\n        if (!isCellEditable(row.index, column.id)) return;\n        if (e.key === \"Enter\") {\n            e.preventDefault();\n            onBlur();\n            // Send a POST request with the updated value\n            try {\n                const payload = {\n                    rowIndex: row.index,\n                    columnId: column.id,\n                    companyName: row.original.company_name,\n                    initialValues: initialValue,\n                    updatedValue: value,\n                    \n                };\n                const res = await axios.post(\"http://localhost:8080/api/profile/update\", payload);\n                console.log(res);\n\n            } catch (err) {\n                console.log(err);\n            }\n        }\n    };\n    \n    \n\n    return columnMeta?.type === \"select\" ? (\n        <select onChange={onSelectChange} value={initialValue}>\n            {columnMeta?.options?.map((option) => (\n                <option key={option.value} value={option.value}>{option.label}</option>\n            ))}\n        </select>\n    ) : columnMeta?.type === \"date\" ? (\n        <input\n            type=\"date\"\n            value={value}\n            onChange={onDateChange}\n        />\n    ) : (\n        <input\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n            onBlur={onBlur}\n            onKeyDown={handleKeyDown}\n            type={columnMeta?.type || \"text\"}\n        />\n    );\n}\n\nexport default TableCell;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}