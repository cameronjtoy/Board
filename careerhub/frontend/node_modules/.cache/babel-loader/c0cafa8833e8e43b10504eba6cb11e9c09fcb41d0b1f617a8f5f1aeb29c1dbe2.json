{"ast":null,"code":"var _jsxFileName = \"/Users/camerontoy/Board/careerhub/frontend/src/components/Profile/Profile.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./Profile.css\";\nimport Cell from \"../Buttons/Cell\";\nimport { createColumnHelper, flexRender, getCoreRowModel, useReactTable } from \"@tanstack/react-table\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setData, setEditedRows, updateData } from '../Redux/Table/tableSlice';\nimport TableCellContext from \"../Redux/Table/tableContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columnHelper = createColumnHelper();\nconst columns = [columnHelper.accessor(\"company_name\", {\n  header: \"Company Name\",\n  cell: Cell,\n  meta: {\n    type: \"text\"\n  }\n}), columnHelper.accessor(\"status\", {\n  header: \"Stage\",\n  cell: Cell,\n  meta: {\n    type: \"select\",\n    options: [{\n      label: \"Applied\",\n      value: \"Applied\"\n    }, {\n      label: \"Interviewing\",\n      value: \"Interviewing\"\n    }, {\n      label: \"Offer\",\n      value: \"Offer\"\n    }, {\n      label: \"Rejected\",\n      value: \"Rejected\"\n    }]\n  }\n}), columnHelper.accessor(\"next_deadline\", {\n  header: \"Next Deadline\",\n  cell: Cell,\n  meta: {\n    type: \"date\"\n  }\n}), columnHelper.accessor(\"links\", {\n  header: \"Links\",\n  cell: Cell,\n  meta: {\n    type: \"text\"\n  }\n})];\nconst Profile = () => {\n  _s();\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.table.data);\n  const editedRows = useSelector(state => state.table.editedRows);\n  const [cellBeingEdited, setCellBeingEdited] = useState(null); // default to no cell being edited\n\n  const startEditing = (rowIndex, columnId) => {\n    setCellBeingEdited({\n      rowIndex,\n      columnId\n    });\n  };\n  const stopEditing = () => {\n    setCellBeingEdited(null);\n  };\n  const isCellEditable = (rowIndex, columnId) => {\n    // Allow editing if no cell is being edited OR if the cell being edited is the current cell.\n    return !cellBeingEdited || cellBeingEdited.rowIndex === rowIndex && cellBeingEdited.columnId === columnId;\n  };\n  useEffect(() => {\n    axios.get(\"http://localhost:8080/api/profile\", {\n      withCredentials: true\n    }).then(res => {\n      dispatch(setData(res.data.userCompanies));\n    });\n  }, [dispatch]);\n  const [newRow, setNewRow] = useState({\n    company_name: \"\",\n    status: \"\",\n    next_deadline: \"\",\n    links: \"\"\n  });\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    meta: {\n      editedRows,\n      setEditedRows: rows => dispatch(setEditedRows(rows)),\n      updateData: (rowIndex, columnId, value) => {\n        dispatch(updateData({\n          rowIndex,\n          columnId,\n          value\n        }));\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(TableCellContext.Provider, {\n    value: {\n      isCellEditable,\n      startEditing,\n      stopEditing\n    },\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: table.getHeaderGroups().map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: headerGroup.headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())\n          }, header.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this))\n        }, headerGroup.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: table.getRowModel().rows.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.getVisibleCells().map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: flexRender(cell.column.columnDef.cell, cell.getContext())\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this))\n        }, row.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"sBLY8Y9Zxzo2NluYa/bjo0xEP3c=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useReactTable];\n});\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useEffect","useState","axios","Cell","createColumnHelper","flexRender","getCoreRowModel","useReactTable","useSelector","useDispatch","setData","setEditedRows","updateData","TableCellContext","jsxDEV","_jsxDEV","columnHelper","columns","accessor","header","cell","meta","type","options","label","value","Profile","_s","dispatch","data","state","table","editedRows","cellBeingEdited","setCellBeingEdited","startEditing","rowIndex","columnId","stopEditing","isCellEditable","get","withCredentials","then","res","userCompanies","newRow","setNewRow","company_name","status","next_deadline","links","rows","Provider","children","getHeaderGroups","map","headerGroup","headers","isPlaceholder","column","columnDef","getContext","id","fileName","_jsxFileName","lineNumber","columnNumber","getRowModel","row","getVisibleCells","_c","$RefreshReg$"],"sources":["/Users/camerontoy/Board/careerhub/frontend/src/components/Profile/Profile.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./Profile.css\";\nimport Cell from \"../Buttons/Cell\";\nimport { createColumnHelper, flexRender, getCoreRowModel, useReactTable } from \"@tanstack/react-table\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setData, setEditedRows, updateData } from '../Redux/Table/tableSlice';\nimport TableCellContext from \"../Redux/Table/tableContext\"\n\n\n\nconst columnHelper = createColumnHelper();\n\n\nconst columns = [\n  columnHelper.accessor(\"company_name\", {\n    header: \"Company Name\",\n    cell: Cell,\n    meta: {\n      type: \"text\",\n    },\n\n  }),\n  columnHelper.accessor(\"status\", {\n    header: \"Stage\",\n    cell: Cell,\n    meta: {\n      type: \"select\",\n      options: [\n        { label: \"Applied\", value: \"Applied\" },\n        { label: \"Interviewing\", value: \"Interviewing\" },\n        { label: \"Offer\", value: \"Offer\" },\n        { label: \"Rejected\", value: \"Rejected\" },\n      ],\n    },\n  }),\n  columnHelper.accessor(\"next_deadline\", {\n    header: \"Next Deadline\",\n    cell: Cell,\n    meta: {\n      type: \"date\",\n    },\n  }),\n  columnHelper.accessor(\"links\", {\n    header: \"Links\",\n    cell: Cell,\n    meta: {\n      type: \"text\",\n    },\n  }),\n];\n\nconst Profile = () => {\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.table.data);\n  const editedRows = useSelector(state => state.table.editedRows);\n  const [cellBeingEdited, setCellBeingEdited] = useState(null); // default to no cell being edited\n\n  const startEditing = (rowIndex, columnId) => {\n    setCellBeingEdited({ rowIndex, columnId });\n  };\n\n  const stopEditing = () => {\n    setCellBeingEdited(null);\n  };\n\n  const isCellEditable = (rowIndex, columnId) => {\n    // Allow editing if no cell is being edited OR if the cell being edited is the current cell.\n    return !cellBeingEdited || (cellBeingEdited.rowIndex === rowIndex && cellBeingEdited.columnId === columnId);\n  };\n\n  useEffect(() => {\n    axios.get(\"http://localhost:8080/api/profile\", { withCredentials: true }).then((res) => {\n      dispatch(setData(res.data.userCompanies));\n    });\n  }, [dispatch]);\n\n  const [newRow , setNewRow] = useState({\n    company_name: \"\",\n    status: \"\",\n    next_deadline: \"\",\n    links: \"\",\n  });\n  \n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    meta: {\n      editedRows,\n      setEditedRows: (rows) => dispatch(setEditedRows(rows)),\n      updateData: (rowIndex, columnId, value) => {\n        dispatch(updateData({ rowIndex, columnId, value }));\n      },\n    }\n  });\n\n\n  return (\n    <TableCellContext.Provider value={{\n      isCellEditable,\n      startEditing,\n      stopEditing\n    }}>\n      <table>\n        <thead>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <tr key={headerGroup.id}>\n              {headerGroup.headers.map((header) => (\n                <th key={header.id}>\n                  {header.isPlaceholder\n                    ? null\n                    : flexRender(\n                      header.column.columnDef.header,\n                      header.getContext()\n                    )}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody>\n          {table.getRowModel().rows.map((row) => (\n            <tr key={row.id}>\n              {row.getVisibleCells().map((cell) => (\n                <td key={cell.id}>\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </TableCellContext.Provider>\n  );\n}\n\nexport default Profile;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,eAAe;AACtB,OAAOC,IAAI,MAAM,iBAAiB;AAClC,SAASC,kBAAkB,EAAEC,UAAU,EAAEC,eAAe,EAAEC,aAAa,QAAQ,uBAAuB;AACtG,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,OAAO,EAAEC,aAAa,EAAEC,UAAU,QAAQ,2BAA2B;AAC9E,OAAOC,gBAAgB,MAAM,6BAA6B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAI1D,MAAMC,YAAY,GAAGZ,kBAAkB,CAAC,CAAC;AAGzC,MAAMa,OAAO,GAAG,CACdD,YAAY,CAACE,QAAQ,CAAC,cAAc,EAAE;EACpCC,MAAM,EAAE,cAAc;EACtBC,IAAI,EAAEjB,IAAI;EACVkB,IAAI,EAAE;IACJC,IAAI,EAAE;EACR;AAEF,CAAC,CAAC,EACFN,YAAY,CAACE,QAAQ,CAAC,QAAQ,EAAE;EAC9BC,MAAM,EAAE,OAAO;EACfC,IAAI,EAAEjB,IAAI;EACVkB,IAAI,EAAE;IACJC,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE,CACP;MAAEC,KAAK,EAAE,SAAS;MAAEC,KAAK,EAAE;IAAU,CAAC,EACtC;MAAED,KAAK,EAAE,cAAc;MAAEC,KAAK,EAAE;IAAe,CAAC,EAChD;MAAED,KAAK,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAQ,CAAC,EAClC;MAAED,KAAK,EAAE,UAAU;MAAEC,KAAK,EAAE;IAAW,CAAC;EAE5C;AACF,CAAC,CAAC,EACFT,YAAY,CAACE,QAAQ,CAAC,eAAe,EAAE;EACrCC,MAAM,EAAE,eAAe;EACvBC,IAAI,EAAEjB,IAAI;EACVkB,IAAI,EAAE;IACJC,IAAI,EAAE;EACR;AACF,CAAC,CAAC,EACFN,YAAY,CAACE,QAAQ,CAAC,OAAO,EAAE;EAC7BC,MAAM,EAAE,OAAO;EACfC,IAAI,EAAEjB,IAAI;EACVkB,IAAI,EAAE;IACJC,IAAI,EAAE;EACR;AACF,CAAC,CAAC,CACH;AAED,MAAMI,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGnB,WAAW,CAAC,CAAC;EAC9B,MAAMoB,IAAI,GAAGrB,WAAW,CAACsB,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACF,IAAI,CAAC;EACnD,MAAMG,UAAU,GAAGxB,WAAW,CAACsB,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,UAAU,CAAC;EAC/D,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9D,MAAMkC,YAAY,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC3CH,kBAAkB,CAAC;MAAEE,QAAQ;MAAEC;IAAS,CAAC,CAAC;EAC5C,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBJ,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,MAAMK,cAAc,GAAGA,CAACH,QAAQ,EAAEC,QAAQ,KAAK;IAC7C;IACA,OAAO,CAACJ,eAAe,IAAKA,eAAe,CAACG,QAAQ,KAAKA,QAAQ,IAAIH,eAAe,CAACI,QAAQ,KAAKA,QAAS;EAC7G,CAAC;EAEDrC,SAAS,CAAC,MAAM;IACdE,KAAK,CAACsC,GAAG,CAAC,mCAAmC,EAAE;MAAEC,eAAe,EAAE;IAAK,CAAC,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAK;MACtFf,QAAQ,CAAClB,OAAO,CAACiC,GAAG,CAACd,IAAI,CAACe,aAAa,CAAC,CAAC;IAC3C,CAAC,CAAC;EACJ,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;EAEd,MAAM,CAACiB,MAAM,EAAGC,SAAS,CAAC,GAAG7C,QAAQ,CAAC;IACpC8C,YAAY,EAAE,EAAE;IAChBC,MAAM,EAAE,EAAE;IACVC,aAAa,EAAE,EAAE;IACjBC,KAAK,EAAE;EACT,CAAC,CAAC;EAGF,MAAMnB,KAAK,GAAGxB,aAAa,CAAC;IAC1BsB,IAAI;IACJZ,OAAO;IACPX,eAAe,EAAEA,eAAe,CAAC,CAAC;IAClCe,IAAI,EAAE;MACJW,UAAU;MACVrB,aAAa,EAAGwC,IAAI,IAAKvB,QAAQ,CAACjB,aAAa,CAACwC,IAAI,CAAC,CAAC;MACtDvC,UAAU,EAAEA,CAACwB,QAAQ,EAAEC,QAAQ,EAAEZ,KAAK,KAAK;QACzCG,QAAQ,CAAChB,UAAU,CAAC;UAAEwB,QAAQ;UAAEC,QAAQ;UAAEZ;QAAM,CAAC,CAAC,CAAC;MACrD;IACF;EACF,CAAC,CAAC;EAGF,oBACEV,OAAA,CAACF,gBAAgB,CAACuC,QAAQ;IAAC3B,KAAK,EAAE;MAChCc,cAAc;MACdJ,YAAY;MACZG;IACF,CAAE;IAAAe,QAAA,eACAtC,OAAA;MAAAsC,QAAA,gBACEtC,OAAA;QAAAsC,QAAA,EACGtB,KAAK,CAACuB,eAAe,CAAC,CAAC,CAACC,GAAG,CAAEC,WAAW,iBACvCzC,OAAA;UAAAsC,QAAA,EACGG,WAAW,CAACC,OAAO,CAACF,GAAG,CAAEpC,MAAM,iBAC9BJ,OAAA;YAAAsC,QAAA,EACGlC,MAAM,CAACuC,aAAa,GACjB,IAAI,GACJrD,UAAU,CACVc,MAAM,CAACwC,MAAM,CAACC,SAAS,CAACzC,MAAM,EAC9BA,MAAM,CAAC0C,UAAU,CAAC,CACpB;UAAC,GANI1C,MAAM,CAAC2C,EAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAOd,CACL;QAAC,GAVKV,WAAW,CAACM,EAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAWnB,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACRnD,OAAA;QAAAsC,QAAA,EACGtB,KAAK,CAACoC,WAAW,CAAC,CAAC,CAAChB,IAAI,CAACI,GAAG,CAAEa,GAAG,iBAChCrD,OAAA;UAAAsC,QAAA,EACGe,GAAG,CAACC,eAAe,CAAC,CAAC,CAACd,GAAG,CAAEnC,IAAI,iBAC9BL,OAAA;YAAAsC,QAAA,EACGhD,UAAU,CAACe,IAAI,CAACuC,MAAM,CAACC,SAAS,CAACxC,IAAI,EAAEA,IAAI,CAACyC,UAAU,CAAC,CAAC;UAAC,GADnDzC,IAAI,CAAC0C,EAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEZ,CACL;QAAC,GALKE,GAAG,CAACN,EAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMX,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEhC,CAAC;AAAAvC,EAAA,CApFKD,OAAO;EAAA,QACMjB,WAAW,EACfD,WAAW,EACLA,WAAW,EA8BhBD,aAAa;AAAA;AAAA+D,EAAA,GAjCvB5C,OAAO;AAsFb,eAAeA,OAAO;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}